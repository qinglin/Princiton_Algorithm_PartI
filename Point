
/*************************************************************************
 * Name: Qinglin,Xia
 * Email:xiaqinglinv5@gmail.com
 *
 * Compilation:  javac Point.java
 * Execution:
 * Dependencies: StdDraw.java
 *
 * Description: An immutable data type for points in the plane.
 *
 *************************************************************************/


//The slopeTo() method should return the slope between the invoking point (x0, y0) and the argument point (x1, y1), which is given by the formula (y1 − y0) / (x1 − x0). 
//Treat the slope of a horizontal line segment as positive zero; treat the slope of a vertical line segment as positive infinity; treat the slope of a degenerate line segment (between a point and itself) as negative infinity.
//The SLOPE_ORDER comparator should compare points by the slopes they make with the invoking point (x0, y0). 


import java.util.Comparator;

public class Point implements Comparable<Point> {

    // compare points by slope
    public final Comparator<Point> SLOPE_ORDER ;       // YOUR DEFINITION HERE

    private final int x;                              // x coordinate
    private final int y;                              // y coordinate

    // create the point (x, y)
    public Point(int x, int y) {
        /* DO NOT MODIFY */
        this.x = x;
        this.y = y;
        SLOPE_ORDER = new bySlope();
    }
 // Formally, the point (x1, y1) is less than the point (x2, y2) if and only if 
//  the slope (y1 − y0) / (x1 − x0) is less than the slope (y2 − y0) / (x2 − x0). 
//  Treat horizontal, vertical, and degenerate line segments as in the slopeTo() method.
    private class bySlope implements Comparator<Point>{

		@Override
		public int compare(Point o1, Point o2) {
			int result = 1;
			if (Point.this.slopeTo(o1) == Point.this.slopeTo(o2)) result = 0;
			else if (Point.this.slopeTo(o1) < Point.this.slopeTo(o2)) {
//				StdOut.println(Point.this.toString()+ "," + o1.toString() +Point.this.slopeTo(o1));
//				StdOut.println(Point.this.toString()+ "," + o2.toString() +Point.this.slopeTo(o2));
				result = -1;}
			return result;
		}
    	
    }

    // plot this point to standard drawing
    public void draw() {
        /* DO NOT MODIFY */
        StdDraw.point(x, y);
    }

    // draw line between this point and that point to standard drawing
    public void drawTo(Point that) {
        /* DO NOT MODIFY */
        StdDraw.line(this.x, this.y, that.x, that.y);
    }

    // slope between this point and that point
    public double slopeTo(Point that) {
    	if (that.y == y && that.x != x) return 0.0; 
    	else if (that.x == x && that.y!=y ) return Double.POSITIVE_INFINITY;
    	else if (that.x == x && that.y == y) return Double.NEGATIVE_INFINITY;
        return (double)(that.y - y)/(that.x - x);
    }
    
       
  // The compareTo() method should compare points by their y-coordinates, 
  // breabking ties by their x-coordinates. 
  // Formally, the invoking point (x0, y0) is 
  // less than the argument point (x1, y1) if and 
  // only if either y0 < y1 or if y0 = y1 and x0 < x1.
  // is this point lexicographically smaller than that one?
  // comparing y-coordinates and breaking ties by x-coordinates
    public int compareTo(Point that) {
		int result = 1;
		if (x == that.x && y == that.y) result = 0;
		if (y < that.y || (y == that.y && x < that.x)) result = -1;
		return result;
        
    }

    // return string representation of this point
    public String toString() {
        /* DO NOT MODIFY */
        return "(" + x + ", " + y + ")";
    }

    // unit test
    public static void main(String[] args) {
        Point x = new Point(117,388);
        Point y = new Point(18,241);
        Point z = new Point(51,290);
       
        StdOut.println(x.SLOPE_ORDER.compare(y, z));
        StdOut.println(x.SLOPE_ORDER.compare(z, y));
        
        x.draw();
        x.drawTo(y);
    }

	}
